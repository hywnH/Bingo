#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bingo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);
var n_user = 0;
// 빙고 사이트에 접속했을 때
io.on('connection', function(socket){
  n_user++;
  console.log('user connected: ', socket.id);
  socket.ready = "no";
  socket.clicked = [];
  if(n_user > 2) socket.emit('too late');

  // 접속이 끊어졌을 때
  socket.on('disconnect', function(){
    console.log('user disconnected: ' + socket.id);
    n_user--;
  });

  socket.on('ready', function(){
    socket.broadcast.emit('other ready');
    socket.ready = "ready";
  });

  socket.on('other ready', function(){
    if(socket.ready === "ready") {
      console.log('game started');
      io.emit('game start');
    };
  });

  socket.on('button click', function(num){
    io.emit('button click', num);
  });

  socket.on('clicked box', function(box){
    socket.clicked.push(box);
    if(
      (socket.clicked.includes('button0')
      &&socket.clicked.includes('button1')
      &&socket.clicked.includes('button2')
      &&socket.clicked.includes('button3')
      &&socket.clicked.includes('button4'))
      ||
      (socket.clicked.includes('button5')
      &&socket.clicked.includes('button6')
      &&socket.clicked.includes('button7')
      &&socket.clicked.includes('button8')
      &&socket.clicked.includes('button9'))
      ||
      (socket.clicked.includes('button10')
      &&socket.clicked.includes('button11')
      &&socket.clicked.includes('button12')
      &&socket.clicked.includes('button13')
      &&socket.clicked.includes('button14'))
      ||
      (socket.clicked.includes('button15')
      &&socket.clicked.includes('button16')
      &&socket.clicked.includes('button17')
      &&socket.clicked.includes('button18')
      &&socket.clicked.includes('button19'))
      ||
      (socket.clicked.includes('button20')
      &&socket.clicked.includes('button21')
      &&socket.clicked.includes('button22')
      &&socket.clicked.includes('button23')
      &&socket.clicked.includes('button24'))
      ||
      (socket.clicked.includes('button0')
      &&socket.clicked.includes('button5')
      &&socket.clicked.includes('button10')
      &&socket.clicked.includes('button15')
      &&socket.clicked.includes('button20'))
      ||
      (socket.clicked.includes('button1')
      &&socket.clicked.includes('button6')
      &&socket.clicked.includes('button11')
      &&socket.clicked.includes('button16')
      &&socket.clicked.includes('button21'))
      ||
      (socket.clicked.includes('button2')
      &&socket.clicked.includes('button7')
      &&socket.clicked.includes('button12')
      &&socket.clicked.includes('button17')
      &&socket.clicked.includes('button22'))
      ||
      (socket.clicked.includes('button3')
      &&socket.clicked.includes('button8')
      &&socket.clicked.includes('button13')
      &&socket.clicked.includes('button18')
      &&socket.clicked.includes('button23'))
      ||
      (socket.clicked.includes('button4')
      &&socket.clicked.includes('button9')
      &&socket.clicked.includes('button14')
      &&socket.clicked.includes('button19')
      &&socket.clicked.includes('button24'))
      ||
      (socket.clicked.includes('button0')
      &&socket.clicked.includes('button6')
      &&socket.clicked.includes('button12')
      &&socket.clicked.includes('button18')
      &&socket.clicked.includes('button24'))
      ||
      (socket.clicked.includes('button4')
      &&socket.clicked.includes('button8')
      &&socket.clicked.includes('button12')
      &&socket.clicked.includes('button16')
      &&socket.clicked.includes('button20'))
      ){
        socket.emit('win');
        socket.broadcast.emit('lose');
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

}
